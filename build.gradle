//import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
//    id 'c'
}

group 'com.rfw.hotkey_server'
version '1.0-SNAPSHOT'

mainClassName = "com.rfw.hotkey_server.Main"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

javafx {
    version = "12.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile 'com.google.code.findbugs:jsr305:3.0.2' // debugging help library (Nullable, NonNull, etc.)

    compile 'com.jfoenix:jfoenix:9.0.1' // material design library for javaFX
    compile 'org.json:json:20190722' // JSON handling
    compile 'org.imgscalr:imgscalr-lib:4.2' // image processing
    compile 'com.github.kenglxn.QRGen:javase:2.6.0' // QR code generation
    compile 'net.sf.bluecove:bluecove:2.1.0' // bluetooth connectivity
    compile 'net.sf.bluecove:bluecove-gpl:2.1.0' // bluetooth connectivity module for linux
}

run {
    systemProperty "java.library.path", file("$projectDir/libs").absolutePath
}

//// native bridge library
//model {
//    components {
//        bridge(NativeLibrarySpec) {
//            sources {
//                c {
//                    source {
//                        srcDir 'src/main/jni'
//                        include "**/*.c"
//                    }
//                }
//            }
//            binaries.all {
//                if (targetPlatform.operatingSystem.macOsX) {
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
//                    cCompiler.args '-mmacosx-version-min=10.4'
//                    linker.args '-mmacosx-version-min=10.4'
//                    linker.args '-lxdo'
//                } else if (targetPlatform.operatingSystem.linux) {
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
//                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
//                    linker.args '-lxdo'
//                } else if (targetPlatform.operatingSystem.windows) {
//                    cCompiler.args "-I${Jvm.current().javaHome}/include"
//                    cCompiler.args "-I${Jvm.current().javaHome}/include/win32"
//                    linker.args "User32.lib"
//                } else if (targetPlatform.operatingSystem.freeBSD) {
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/freebsd"
//                    linker.args '-lxdo'
//                }
//            }
//        }
//    }
//}
//
//// task to copy compiled native libraries to lib folder
//// (do this once after making changes in the native libraries)
//task copyBridgeLib(type: Copy) {
//    file("libs").mkdirs()
//    from("$buildDir/libs/bridge/shared")
//    into("libs")
////    from("$buildDir/libs/bridge/static")
////    into("libs")
//}
